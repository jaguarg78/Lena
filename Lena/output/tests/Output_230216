Output 23/02/16




Starting Lena.....
Init input_file
*********24
*********************************
File Name  :images/lena_GS.bmp
*** File Header ***
Magic Id   : BM
File Size  : 786486
Reserved1  : 0
Reserved2  : 0
Offset     : 54
*** Info Header ***
Info Size  : 40
Img Width  : 512
Img Height : 512
Planes     : 1
BitCount   : 24
Compression: 0
Image Size : 786432
XPelsPerMet: 0
YPelsPerMet: 0
Used Color : 0
Imp Color  : 0

Init input_file
*********1
*********************************
File Name  :images/Test_32x32_BI.bmp
*** File Header ***
Magic Id   : BM
File Size  : 190
Reserved1  : 0
Reserved2  : 0
Offset     : 62
*** Info Header ***
Info Size  : 40
Img Width  : 32
Img Height : 32
Planes     : 1
BitCount   : 1
Compression: 0
Image Size : 128
XPelsPerMet: 2925
YPelsPerMet: 2925
Used Color : 2
Imp Color  : 2
*** Color Map *** 
[0 0 0]
[ff ff ff]

************************************
WMProcess_17
************************************
***********************************
***********************************
Redundancy : 3
Iterations : 1
*********************************
[R: 0, I: 0, V: 1] [0 0] 

/////////////////////////////////

# Process 17_1
value = 0
A_1 = [139 141 142 146,
       141 142 143 147,
       143 143 147 147,
       142 144 145 149];
value = 1
A_1 = [156 157 157 155,
       151 159 157 159,
       155 158 154 157,
       158 156 157 154];

[U, S, V] = svd(A_1)
s_diff = abs(S(2, 2) - S(3, 3));
if (S(3, 3) > s_diff)
	S(4, 4) = s_diff;
else
#	S(4, 4) = -s_diff;
	S(4, 4) = 0.;
endif
S(2, 2) = S(2, 2) + (20 * value);
S
A_1_p = U * S * transpose(V);
A_1_8 = uint8(A_1)
A_1_o = uint8(A_1_p)
psnr(A_1_8, A_1_o)

///////////////////////////////////


43 43 54 51
43 43 54 51
42 42 49 46
46 46 49 49

[D: 20]
Singular Values Pre
    188.352           0           0           0
          0       5.618           0           0
          0           0     1.02631           0
          0           0           0 1.83591e-30
Singular Values Post
Data to made the final matrix up w/ workaround
   -0.509481    -0.447385    -0.200687    -0.707107
   -0.509481    -0.447385    -0.200687     0.707107
   -0.476159     0.153873     0.865792  2.67359e-15
   -0.504114     0.758957    -0.412132 -1.16692e-15

188.352       0       0       0
      0  25.618       0       0
      0       0 1.02631       0
      0       0       0       0

   -0.461919     0.516118     0.142313     0.707107
   -0.461919     0.516118     0.142313    -0.707107
   -0.547153    -0.638829     0.540851 -5.08309e-16
    -0.52334    -0.243191    -0.816684   4.5821e-16

Matrix to be returned
38.3819 38.3819 59.7161  53.176
38.3819 38.3819 59.7161  53.176
43.5883 43.5883  47.034 45.2516
53.8342 53.8342 39.3031 45.3086

38 38 60 53
38 38 60 53
44 44 47 45
54 54 39 45

************************************
WMProcess_35
************************************
***********************************
***********************************
Redundancy : 3
Iterations : 1
*********************************

/////////////////////////////////

# Process 35
value = 1
A_1 = [43 43 54 51,
       43 43 54 51,
       42 42 49 46,
       46 46 49 49];
[U, S, V] = svd(A_1)
S(3,3) = S(2,2);
delta = 20;
S(2,2) = S(2,2) + (delta * value);
S
A_1_p = U * S * transpose(V);
A_1_8 = uint8(A_1)
A_1_o = uint8(A_1_p)
psnr(A_1_8, A_1_o)

///////////////////////////////////


[R: 0, I: 0, V: 1] [0 0] 
43 43 54 51
43 43 54 51
42 42 49 46
46 46 49 49

[D: 20]
Singular Values Pre
    188.352           0           0           0
          0       5.618           0           0
          0           0     1.02631           0
          0           0           0 1.83591e-30
Singular Values Post
Data to made the final matrix up w/ workaround
   -0.509481    -0.447385    -0.200687    -0.707107
   -0.509481    -0.447385    -0.200687     0.707107
   -0.476159     0.153873     0.865792  2.67359e-15
   -0.504114     0.758957    -0.412132 -1.16692e-15

    188.352           0           0           0
          0      25.618           0           0
          0           0       5.618           0
          0           0           0 1.83591e-30

   -0.461919     0.516118     0.142313     0.707107
   -0.461919     0.516118     0.142313    -0.707107
   -0.547153    -0.638829     0.540851 -5.08309e-16
    -0.52334    -0.243191    -0.816684   4.5821e-16

Matrix to be returned
38.2508 38.2508 59.2177 53.9286
38.2508 38.2508 59.2177 53.9286
44.1541 44.1541 49.1842 42.0049
53.5649 53.5649 38.2796  46.854

38 38 59 54
38 38 59 54
44 44 49 42
54 54 38 47
************************************
WMProcess_74
************************************
***********************************
***********************************
Redundancy : 3
Iterations : 1
*********************************

/////////////////////////////////

# Process 74
value = 1
A_1 = [43 43 54 51 54 46 49 51,
       43 43 54 51 54 46 49 51,
       42 42 49 46 54 46 49 48,
       46 46 49 49 52 49 50 51,
       53 53 47 47 53 53 49 54,
       48 48 56 52 54 53 50 56,
       47 47 54 52 49 54 52 50,
       48 48 52 49 53 56 51 53];
[U, S, V] = svd(A_1);

constant = 10
Z = mod(S(2,2), constant)
[U, S, V]

if (value == 0)
if (Z < (3 * constant / 4))
S(2,2) = S(2,2) + (constant / 4) - Z;
else
S(2,2) = S(2,2) + (5 * constant / 4) - Z;
endif
else
if (Z < (constant / 4))
S(2,2) = S(2,2) - (constant / 4) + Z;
else
S(2,2) = S(2,2) + (3 * constant / 4) - Z;
endif
endif
S
A_1_p = U * S * transpose(V);
A_1_8 = uint8(A_1)
A_1_o = uint8(A_1_p)
psnr(A_1_8, A_1_o)

///////////////////////////////////

[R: 0, I: 0, V: 1] [0 0] 
43 43 54 51 54 46 49 51
43 43 54 51 54 46 49 51
42 42 49 46 54 46 49 48
46 46 49 49 52 49 50 51
53 53 47 47 53 53 49 54
48 48 56 52 54 53 50 56
47 47 54 52 49 54 52 50
48 48 52 49 53 56 51 53

Data to made the final matrix up w/ workaround
   -0.346891     -0.43537    -0.132427     0.199085     0.124858     0.114312    -0.322941    -0.707107
   -0.346891     -0.43537    -0.132427     0.199085     0.124858     0.114312    -0.322941     0.707107
   -0.333502      -0.2223    -0.375924    -0.627291    -0.163767     0.264644      0.45573  3.17478e-15
   -0.347153    0.0687245    -0.127433    -0.156427     0.347443    -0.841471    0.0725459 -1.66816e-15
   -0.361427     0.708227    -0.407675     0.209432     0.227758     0.317786     -0.06973   6.0804e-16
   -0.369548   -0.0370683     0.138098     0.586742    -0.437694    -0.114531     0.542245  1.90302e-15
   -0.358541     0.057972     0.749674    -0.169089     0.430407     0.261574     0.154319  1.50416e-15
   -0.363108     0.245856     0.245127    -0.293338    -0.626566    -0.115019    -0.505726 -2.87246e-15

      399.5           0           0           0           0           0           0           0
          0        17.5           0           0           0           0           0           0
          0           0     8.21297           0           0           0           0           0
          0           0           0     5.00875           0           0           0           0
          0           0           0           0     3.79225           0           0           0
          0           0           0           0           0     1.36856           0           0
          0           0           0           0           0           0     0.45236           0
          0           0           0           0           0           0           0 1.76099e-30

   -0.327868     0.451585    -0.123797     0.162822     0.278948      0.26042    0.0332542     0.707107
   -0.327868     0.451585    -0.123797     0.162822     0.278948      0.26042    0.0332542    -0.707107
   -0.367312    -0.502656     0.345205     0.282596    -0.174259     0.546072     0.291259 -5.38547e-16
   -0.351376    -0.328276     0.239909     0.194468     0.488095    -0.330596    -0.570846  1.48987e-16
   -0.374092    -0.274056     -0.68821     -0.31047     -0.25684     0.189271    -0.336353 -4.35467e-16
   -0.357203     0.376522      0.51162    -0.312457    -0.525782   -0.0623706    -0.301523   -2.644e-16
   -0.353053    -0.116516    0.0783615     -0.63926      0.33897    -0.235744      0.52584  7.67252e-16
   -0.366657    0.0355175    -0.226047     0.476051    -0.344179    -0.601319     0.326397  5.54566e-16

Matrix to be returned
42.4613 42.4613 54.5996 51.3916 54.3269 45.5509  49.139 50.9576
42.4613 42.4613 54.5996 51.3916 54.3269 45.5509  49.139 50.9576
 41.725  41.725 49.3062 46.1999 54.1669 45.7707  49.071 47.9784
 46.085  46.085 48.9054 48.9382 51.9484 49.0709 49.9781 51.0067
53.8763 53.8763 46.0246  46.363 52.4682 53.7306 48.7739 54.0689
47.9541 47.9541 56.0511 52.0333 54.0278 52.9618 50.0118 55.9964
47.0717 47.0717 53.9202 51.9479 48.9565 54.0598 51.9815 50.0056
48.3042 48.3042 51.6614 48.7789 52.8154 56.2536 50.9215 53.0239

42 42 55 51 54 46 49 51
42 42 55 51 54 46 49 51
42 42 49 46 54 46 49 48
46 46 49 49 52 49 50 51
54 54 46 46 52 54 49 54
48 48 56 52 54 53 50 56
47 47 54 52 49 54 52 50
48 48 52 49 53 56 51 53
************************************
WMProcess_43
************************************
***********************************
***********************************
Redundancy : 3
Iterations : 1
*********************************
[R: 0, I: 0, V: 1] [0 0] 
43 43 54 51 54 46 49 51
43 43 54 51 54 46 49 51
42 42 49 46 54 46 49 48
46 46 49 49 52 49 50 51
53 53 47 47 53 53 49 54
48 48 56 52 54 53 50 56
47 47 54 52 49 54 52 50
48 48 52 49 53 56 51 53

Data to made the final matrix up w/ workaround
   -0.346891     -0.43537    -0.132427     0.199085     0.124858     0.114312    -0.322941    -0.707107
   -0.346891     -0.43537    -0.132427     0.199085     0.124858     0.114312    -0.322941     0.707107
   -0.333502      -0.2223    -0.375924    -0.627291    -0.163767     0.264644      0.45573  3.17478e-15
   -0.347153    0.0687245    -0.127433    -0.156427     0.347443    -0.841471    0.0725459 -1.66816e-15
   -0.361427     0.708227    -0.407675     0.209432     0.227758     0.317786     -0.06973   6.0804e-16
   -0.369548   -0.0370683     0.138098     0.586742    -0.437694    -0.114531     0.542245  1.90302e-15
   -0.358541     0.057972     0.749674    -0.169089     0.430407     0.261574     0.154319  1.50416e-15
   -0.363108     0.245856     0.245127    -0.293338    -0.626566    -0.115019    -0.505726 -2.87246e-15

      399.5           0           0           0           0           0           0           0
          0       14.75           0           0           0           0           0           0
          0           0     8.21297           0           0           0           0           0
          0           0           0     5.00875           0           0           0           0
          0           0           0           0     3.79225           0           0           0
          0           0           0           0           0     1.36856           0           0
          0           0           0           0           0           0     0.45236           0
          0           0           0           0           0           0           0 1.76099e-30

   -0.327868     0.451585    -0.123797     0.162822     0.278948      0.26042    0.0332542     0.707107
   -0.327868     0.451585    -0.123797     0.162822     0.278948      0.26042    0.0332542    -0.707107
   -0.367312    -0.502656     0.345205     0.282596    -0.174259     0.546072     0.291259 -5.38547e-16
   -0.351376    -0.328276     0.239909     0.194468     0.488095    -0.330596    -0.570846  1.48987e-16
   -0.374092    -0.274056     -0.68821     -0.31047     -0.25684     0.189271    -0.336353 -4.35467e-16
   -0.357203     0.376522      0.51162    -0.312457    -0.525782   -0.0623706    -0.301523   -2.644e-16
   -0.353053    -0.116516    0.0783615     -0.63926      0.33897    -0.235744      0.52584  7.67252e-16
   -0.366657    0.0355175    -0.226047     0.476051    -0.344179    -0.601319     0.326397  5.54566e-16

Matrix to be returned
 43.002  43.002 53.9978 50.9985 53.9988 46.0017 48.9995 51.0002
 43.002  43.002 53.9978 50.9985 53.9988 46.0017 48.9995 51.0002
 42.001  42.001 48.9989 45.9993 53.9994 46.0008 48.9997 48.0001
45.9997 45.9997 49.0004 49.0002 52.0002 48.9997 50.0001      51
52.9968 52.9968 47.0036 47.0024  53.002 52.9973 49.0008 53.9997
48.0002 48.0002 55.9998 51.9999 53.9999 53.0001      50      56
46.9997 46.9997 54.0003 52.0002 49.0002 53.9998 52.0001      50
47.9989 47.9989 52.0013 49.0008 53.0007 55.9991 51.0003 52.9999

43 43 54 51 54 46 49 51
43 43 54 51 54 46 49 51
42 42 49 46 54 46 49 48
46 46 49 49 52 49 50 51
53 53 47 47 53 53 49 54
48 48 56 52 54 53 50 56
47 47 54 52 49 54 52 50
48 48 52 49 53 56 51 53
************************************
WMProcess_09
************************************
***********************************
***********************************
Redundancy : 1
Iterations : 1
*********************************

/////////////////////////////////

# Process 09
value = 1
A_1 = [43 43 54 51,
       43 43 54 51,
       42 42 49 46,
       46 46 49 49];
[U, S, V] = svd(A_1)
S(3,3) = S(2,2);
constant = 0.002;
diffU = abs(U(2,1)) - abs(U(3,1));
isMatching = (value == 1 & diffU >= 0) | (value == 0 & diffU < 0)
if (isMatching)
U(2,1) = - abs(abs(U(2,1)) + ((constant - abs(diffU)) / 2));
U(3,1) = - abs(abs(U(3,1)) - ((constant - abs(diffU)) / 2));
else
U(2,1) = - abs(abs(U(2,1)) - ((constant + abs(diffU)) / 2));
U(3,1) = - abs(abs(U(3,1)) + ((constant + abs(diffU)) / 2));
endif

U
A_1_p = U * S * transpose(V);
A_1_8 = uint8(A_1)
A_1_o = uint8(A_1_p)
psnr(A_1_8, A_1_o)

///////////////////////////////////

[R: 0, I: 0, V: 1] [0 0] 
43 43 54 51
43 43 54 51
42 42 49 46
46 46 49 49

Data to made the final matrix up w/ workaround
   -0.509481    -0.447385    -0.200687    -0.707107
    -0.49382    -0.447385    -0.200687     0.707107
    -0.49182     0.153873     0.865792  2.67359e-15
   -0.504114     0.758957    -0.412132 -1.16692e-15

    188.352           0           0           0
          0       5.618           0           0
          0           0     1.02631           0
          0           0           0 1.83591e-30

   -0.461919     0.516118     0.142313     0.707107
   -0.461919     0.516118     0.142313    -0.707107
   -0.547153    -0.638829     0.540851 -5.08309e-16
    -0.52334    -0.243191    -0.816684   4.5821e-16

Matrix to be returned
41.6374 41.6374  52.386 49.4563
     43      43      54      51
43.3626 43.3626  50.614 47.5437
     46      46      49      49

42 42 52 49
43 43 54 51
43 43 51 48
46 46 49 49
************************************
WMProcess_09
************************************
************************************
WMProcess_18
************************************
***********************************
***********************************
Redundancy : 1
Iterations : 1
*********************************

/////////////////////////////////

# Process 18
value = [1 0]
A_1 = [43 43 54 51,
       43 43 54 51,
       42 42 49 46,
       46 46 49 49];
[U, S, V] = svd(A_1)
S(3,3) = S(2,2);
constant = 0.002;
diffU = abs(U(2,1)) - abs(U(3,1));
isMatchingU = (value[0] == 1 & diffU >= 0) | (value[0] == 0 & diffU < 0)
if (isMatchingU)
U(2,1) = - abs(abs(U(2,1)) + ((constant - abs(diffU)) / 2));
U(3,1) = - abs(abs(U(3,1)) - ((constant - abs(diffU)) / 2));
else
U(2,1) = - abs(abs(U(2,1)) - ((constant + abs(diffU)) / 2));
U(3,1) = - abs(abs(U(3,1)) + ((constant + abs(diffU)) / 2));
endif


diffV = abs(V(1,2)) - abs(V(1,3));
isMatchingV = (value[0] == 1 & diffV >= 0) | (value[0] == 0 & diffV < 0)
if (isMatchingV)
V(1,2) = - abs(abs(V(1,2)) + ((constant - abs(diffU)) / 2));
V(1,3) = - abs(abs(V(1,3)) - ((constant - abs(diffU)) / 2));
else
V(1,2) = - abs(abs(V(1,2)) - ((constant + abs(diffU)) / 2));
V(1,3) = - abs(abs(V(1,3)) + ((constant + abs(diffU)) / 2));
endif

A_1_p = U * S * transpose(V);
A_1_8 = uint8(A_1)
A_1_o = uint8(A_1_p)
psnr(A_1_8, A_1_o)

///////////////////////////////////

[R: 0, I: 0, V: 1] [0 0] 
43 43 54 51
43 43 54 51
42 42 49 46
46 46 49 49

Data to made the final matrix up w/ workaround
   -0.509481    -0.447385    -0.200687    -0.707107
    -0.49382    -0.447385    -0.200687     0.707107
    -0.49182     0.153873     0.865792  2.67359e-15
   -0.504114     0.758957    -0.412132 -1.16692e-15

    188.352           0           0           0
          0       5.618           0           0
          0           0     1.02631           0
          0           0           0 1.83591e-30

   -0.461919     0.516118     0.142313     0.707107
   -0.461919     0.516118     0.142313    -0.707107
   -0.547153    -0.638829     0.540851 -5.08309e-16
    -0.52334    -0.243191    -0.816684   4.5821e-16

Matrix to be returned
41.6374 41.6374  52.386 49.4563
     43      43      54      51
43.3626 43.3626  50.614 47.5437
     46      46      49      49

Data to made the final matrix up w/ workaround
   -0.509481    -0.447385    -0.200687    -0.707107
   -0.509481    -0.447385    -0.200687     0.707107
   -0.476159     0.153873     0.865792  2.67359e-15
   -0.504114     0.758957    -0.412132 -1.16692e-15

    188.352           0           0           0
          0       5.618           0           0
          0           0     1.02631           0
          0           0           0 1.83591e-30

   -0.461919     0.516118     0.142313     0.707107
   -0.418302     0.516118     0.142313    -0.707107
   -0.590771    -0.638829     0.540851 -5.08309e-16
    -0.52334    -0.243191    -0.816684   4.5821e-16

Matrix to be returned
     43 38.8144 58.1856      51
     43 38.8144 58.1856      51
     42 38.0882 52.9118      46
     46 41.8585 53.1415      49

43 39 58 51
43 39 58 51
42 38 53 46
46 42 53 49
The End!!!
